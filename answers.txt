THREADS:

2. זהו תהליכון שvתוכנית לא מחכה שיסיים כלומר ברגע שהתוכנית הסתיימה היא לא מחכה לאותו תהליכון מסוג זה ובעצם מסתיימת רק כאשר התהליכונים
 הראשיים הסתיימו.
 
3. בהתאם למספר הליבות שזמינות במערכת.

4. פונקציית start() זו הפונקציה שמעלה את הthread נותנת להתחיל לרוץ והפונקצית run() היא בעצם קובעת מה אותו thread יעשה.

5. פונקציית join() זו פונקציה שנותן לך אפשרות לעשות סוג של סדר עם הthreads לדעת מתי לתזמן אותם.

6. כדאי לשתמש בcollcction זה מכיון שהוא thread-safe הכוונה שלא צריך לדאוג לסינכרון ולפעולות מרובות תהליכים הוא יודע לבד 
מתי לנעול כאשר נכנס תהליכון אחד ומתי לשחרר. יתרון נוסף הם מתוכננים להיות במקביל מאוד, 
כלומר הם מותאמים לגישה ושינוי בו-זמנית. זה יכול להוביל לשיפור הביצועים ביישומים עם ריבוי הליכים.
כמו כן קיימים גם חסרונות כגוון צריכת זיכרון גבוהה מאוד,ובנוסף בגלל שזה מבנה נתונים שעובד עם הרבה תהליכונים במקביל השימוש בהם יכול להיות יותר
מורכב מאשר ממבנה נתונים שאינם עובדים במקביל.

7. כן.

8. במשתנים שהם משתנים סטטים.

9. סימון זה הוא בעצם נותן להפעיל את הפונקציה לאחר הנקודתיים זה בעצם במקום פונקציה אנונימית. זאת הפונקצית run בעצם.



STREAM:

4. כאשר אתה קורא למתודה parallelStream() על אוסף או מערך, אפשר לעשות פעולות במקביל,
 מה שאומר שפעולות הזרם יבוצעו במקביל על מספר שרשורים במקום להתבצע ברצף על שרשור בודד.

5. ניתן לצרוך Stream (כלומר להפעיל אותו) פעם אחת בלבד. 
לאחר שנקראה פעולת טרמינל בStream, כגון forEach(), reduce(), או collect(), הStream נחשב נצרך.

6. לא יתבצע. מכיוון שהStream לא מבצע את הפעולות על הנתונים המקוריים הוא מייצר תת רשימה לדוגמא שעליה הוא יעשה את הפעולות. 